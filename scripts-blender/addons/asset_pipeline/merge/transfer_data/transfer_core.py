import bpy

from .transfer_functions import (
    attributes,
    constraints,
    modifers,
    parent,
    shape_keys,
    vertex_groups,
    materials,
)

from ... import constants

from .transfer_util import (
    transfer_data_add_entry,
    check_transfer_data_entry,
)


def copy_transfer_data_ownership(
    transfer_data_item, target_obj: bpy.types.Object
) -> None:
    """Copy Transferable Data item to object if non entry exists

    Args:
        transfer_data_item: Item of bpy.types.CollectionProperty from source object
        target_obj (bpy.types.Object): Object to add Transferable Data item to
    """
    transfer_data = target_obj.transfer_data_ownership
    matches = check_transfer_data_entry(
        transfer_data,
        transfer_data_item.name,
        transfer_data_item.type,
    )
    if len(matches) == 0:
        transfer_data_add_entry(
            transfer_data,
            transfer_data_item.name,
            transfer_data_item.type,
            transfer_data_item.owner,
            transfer_data_item.surrender,
        )


def transfer_data_clean(obj):
    vertex_groups.vertex_groups_clean(obj)
    modifers.modifiers_clean(obj)
    constraints.constraints_clean(obj)
    shape_keys.shape_keys_clean(obj)
    attributes.attribute_clean(obj)
    parent.parent_clean(obj)


def transfer_data_is_missing(transfer_data_item) -> bool:
    """Check if Transferable Data item is missing

    Args:
        transfer_data_item: Item of class ASSET_TRANSFER_DATA

    Returns:
        bool: bool if item is missing
    """
    return bool(
        vertex_groups.vertex_group_is_missing(transfer_data_item)
        or modifers.modifier_is_missing(transfer_data_item)
        or constraints.constraint_is_missing(transfer_data_item)
        or shape_keys.shape_key_is_missing(transfer_data_item)
        or attributes.attribute_is_missing(transfer_data_item)
        or parent.parent_is_missing(transfer_data_item)
    )


def init_transfer_data(
    scene: bpy.types.Scene,
    obj: bpy.types.Object,
):
    """Collect Transferable Data Items on a given object

    Args:
        obj (bpy.types.Object): Target object for Transferable Data
        task_layer_name (str): Name of task layer
        temp_transfer_data: Item of class ASSET_TRANSFER_DATA_TEMP
    """
    if obj.library:
        # Don't create ownership data for object data if the object is linked.
        return

    constraints.init_constraints(scene, obj)
    parent.init_parent(scene, obj)
    modifers.init_modifiers(scene, obj)

    if not obj.data or obj.data.library:
        # Don't create ownership data for mesh data if the mesh is linked, or Empties.
        return

    vertex_groups.init_vertex_groups(scene, obj)
    materials.init_materials(scene, obj)
    shape_keys.init_shape_keys(scene, obj)
    attributes.init_attributes(scene, obj)


def apply_transfer_data(context: bpy.types.Context, transfer_data_map) -> None:
    """Apply all Transferable Data from Transferable Data map onto objects.
    Copies any Transferable Data owned by local layer onto objects owned by external layers.
    Applies Transferable Data from external layers onto objects owned by local layers

    Transfer_data_map is generated by class 'AssetTransferMapping'

    Args:
        context (bpy.types.Context): context of .blend file
        transfer_data_map: Map generated by class AssetTransferMapping
    """

    for name in transfer_data_map:
        temp_transfer_data = context.scene.asset_pipeline.temp_transfer_data
        transfer_data = transfer_data_map[name]
        transfer_data_item = temp_transfer_data[
            transfer_data.get('transfer_data_item_index')
        ]
        target_obj = transfer_data.get('target_obj')
        source_obj = transfer_data.get('source_obj')
        if target_obj is None:
            print(f"Failed to Transfer Data for {transfer_data_item.id_data.name}")
            continue
        if transfer_data_item is None:
            continue
        if source_obj != target_obj:
            if transfer_data_item.type == constants.VERTEX_GROUP_KEY:
                print(f"Transferring Data {constants.VERTEX_GROUP_KEY}: {name}")
                vertex_groups.transfer_vertex_group(
                    context=context,
                    vertex_group_name=transfer_data_item.name,
                    target_obj=target_obj,
                    source_obj=source_obj,
                )
            if transfer_data_item.type == constants.MODIFIER_KEY:
                print(f"Transferring Data {constants.MODIFIER_KEY}: {name}")
                modifers.transfer_modifier(
                    modifier_name=transfer_data_item.name,
                    target_obj=target_obj,
                    source_obj=source_obj,
                )
            if transfer_data_item.type == constants.CONSTRAINT_KEY:
                constraints.transfer_constraint(
                    constraint_name=transfer_data_item.name,
                    target_obj=target_obj,
                    source_obj=source_obj,
                )
            if transfer_data_item.type == constants.MATERIAL_SLOT_KEY:
                print(f"Transferring Data {constants.MATERIAL_SLOT_KEY}: {name}")
                materials.transfer_materials(
                    target_obj=target_obj,
                    source_obj=source_obj,
                )
            if transfer_data_item.type == constants.SHAPE_KEY_KEY:
                shape_keys.transfer_shape_key(
                    context=context,
                    target_obj=target_obj,
                    source_obj=source_obj,
                    shape_key_name=transfer_data_item.name,
                )
            if transfer_data_item.type == constants.ATTRIBUTE_KEY:
                attributes.transfer_attribute(
                    target_obj=target_obj,
                    source_obj=source_obj,
                    attribute_name=transfer_data_item.name,
                )
            if transfer_data_item.type == constants.PARENT_KEY:
                parent.transfer_parent(
                    target_obj=target_obj,
                    source_obj=source_obj,
                )

        copy_transfer_data_ownership(
            transfer_data_item=transfer_data_item,
            target_obj=target_obj,
        )
